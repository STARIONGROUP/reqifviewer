<!------------------------------------------------------------------------------
    Copyright 2021-2025 Starion Group S.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
------------------------------------------------------------------------------->

@using System.Globalization
@using System.Text
@using ReqIFSharp
@using Serilog

<RadzenFieldset AllowCollapse="true" Style="margin-bottom: 10px;">

    <HeaderTemplate>
        <span class="d-inline-flex align-items-center align-middle">
            <RadzenIcon Icon="stars" Class="mr-1" /><b>Spec Object Properties</b>
        </span>
    </HeaderTemplate>
    
    <ChildContent>
        <div class="row">

            <div class="col-md-6 col-xl-6 col-lg-6">
                <div><b>Long Name:</b></div>
                <div>@(string.IsNullOrEmpty(this.SpecObject?.LongName) ? "NOT SET" : this.SpecObject.LongName) </div>

                <div><b>Description:</b></div>
                <div>@(string.IsNullOrEmpty(this.SpecObject?.Description) ? "NOT SET" : this.SpecObject.Description) </div>

                <div><b>Last Change Date:</b></div>
                <div>@this.SpecObject?.LastChange.ToString("yyyy-MM-dd, HH:mm:ss", CultureInfo.InvariantCulture)</div>
            </div>

            <div class="col-md-6 col-xl-6 col-lg-6">

                <div><b>Type:</b></div>
                @if (this.SpecObject?.Type == null)
                {
                    <div>NOT SET</div>
                }
                else
                {
                    <a href="@this.QuerySpecObjectTypeUrl(this.SpecObject.Type)">@this.SpecObject.Type.LongName</a>
                }
                
                <div><b>Identifier:</b></div>
                <div>
                    <a href="@this.QuerySpecObjectUrl(this.SpecObject)">@this.SpecObject?.Identifier</a>
                </div>

                <div><b>Alternative ID:</b></div>
                <div>@(this.SpecObject?.AlternativeId != null ? this.SpecObject?.AlternativeId.Identifier : "NOT SET")</div>

            </div>
        </div>
    </ChildContent>
</RadzenFieldset>


    @code {

        /// <summary>
        /// The <see cref="SpecObject"/> object that is loaded on the component
        /// </summary>
        [Parameter]
        public SpecObject SpecObject { get; set; }

        /// <summary>
        /// Queries the url of the <see cref="SpecObject"/>
        /// </summary>
        /// <param name="specObject">
        /// The <see cref="SpecObject"/> of which the url is to be queried
        /// </param>
        /// <returns>
        /// a string representing the url of the <see cref="SpecObject"/>
        /// </returns>
        private string QuerySpecObjectUrl(SpecObject specObject)
        {
            var result = "/";

            try
            {
                var sb = new StringBuilder();

                sb.Append($"/reqif/{specObject.ReqIFContent.DocumentRoot.TheHeader.Identifier}");
                sb.Append($"/specobject/{specObject.Identifier}");
                
                result = sb.ToString();
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }

            return result;
        }

        /// <summary>
        /// Queries the url of the <see cref="SpecObjectType"/>
        /// </summary>
        /// <param name="specObjectType">
        /// The <see cref="SpecObjectType"/> of which the url is to be queried
        /// </param>
        /// <returns>
        /// a string representing the url of the <see cref="SpecObjectType"/>
        /// </returns>
        private string QuerySpecObjectTypeUrl(SpecObjectType specObjectType)
        {
            var result = "/";

            try
            {
                var sb = new StringBuilder();
                
                sb.Append($"/reqif/{specObjectType.ReqIFContent.DocumentRoot.TheHeader.Identifier}");
                sb.Append($"/spectype/{specObjectType.Identifier}");
                
                result = sb.ToString();
            }
            catch (Exception e)
            {
                Log.ForContext<SpecObjectComponent>().Error(e, "QuerySpecObjectTypeUrl Failed");
            }

            return result;
        }
    }
