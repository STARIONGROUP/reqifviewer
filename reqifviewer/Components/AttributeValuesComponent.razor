<!------------------------------------------------------------------------------
    Copyright 2021-2025 Starion Group S.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
------------------------------------------------------------------------------->

@using System.Text
@using ReqIFSharp;
@using ReqIFSharp.Extensions.ReqIFExtensions
@using ReqifViewer.ReqIFExtensions
@using Serilog

<RadzenFieldset AllowCollapse="true" Style="margin-bottom: 10px;">

    <HeaderTemplate>
        <span class="d-inline-flex align-items-center align-middle">
            <RadzenIcon Icon="stars" Class="mr-1" /><b>Attributes</b>
        </span>
    </HeaderTemplate>
    
    <ChildContent>

        @if (selectedAttributeValues?.Any() == true)
        {
            var selectedAttributeValue = selectedAttributeValues[0];
            
            if (selectedAttributeValue is AttributeValueXHTML)
            {
                <RadzenCard Style="margin-bottom: 20px">
                    <ChildContent>
                        <b>Selected Value:</b> @(new MarkupString(selectedAttributeValue.ObjectValue.ToString()))
                    </ChildContent>
                </RadzenCard>
            }
            else
            {
                <RadzenCard Style="margin-bottom: 20px">
                    <ChildContent>
                        <b>Selected Value:</b> @(selectedAttributeValue.QueryFormattedValue())
                    </ChildContent>
                </RadzenCard>
            }
        }

        <RadzenDataGrid Data="@this.AttributeValues" AllowFiltering="true" AllowColumnResize="true"
                        SelectionMode="DataGridSelectionMode.Single" @bind-Value=@selectedAttributeValues TItem="AttributeValue">
            <Columns>
                <RadzenDataGridColumn TItem="AttributeValue" Title="Long Name">
                    <Template Context="attributeValue">
                        <a href="@QueryAttributeDefinitionUrl(attributeValue.AttributeDefinition)">@attributeValue?.AttributeDefinition.LongName</a>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="AttributeValue" Title="Value">
                    <Template Context="attributeValue">
                        @if (attributeValue is AttributeValueXHTML)
                        {
                            @(new MarkupString(attributeValue?.ObjectValue.ToString()))
                        }
                        else
                        {
                            @(attributeValue.QueryFormattedValue())
                        }
                        </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="AttributeValue" Title="Description">
                    <Template Context="attributeValue">
                        @attributeValue?.AttributeDefinition.Description
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

    </ChildContent>
</RadzenFieldset>

@code {

    /// <summary>
    /// Gets or sets the <see cref="IEnumerable{AttributeValue}"/>
    /// </summary>
    [Parameter]
    public IEnumerable<AttributeValue> AttributeValues { get; set; }

    /// <summary>
    /// The selected <see cref="AttributeValue"/>
    /// </summary>
    private IList<AttributeValue> selectedAttributeValues;

    protected override void OnParametersSet()
    {
        this.selectedAttributeValues = null;
    }

    /// <summary>
    /// Queries the url of the <see cref="AttributeDefinition"/>
    /// </summary>
    /// <param name="attributeDefinition">
    /// The <see cref="AttributeDefinition"/> of which the url is to be queried
    /// </param>
    /// <returns>
    /// a string representing the url of the <see cref="AttributeDefinition"/>
    /// </returns>
    private string QueryAttributeDefinitionUrl(AttributeDefinition attributeDefinition)
    {
        var result = "/";

        try
        {
            var sb = new StringBuilder();

            sb.Append($"/reqif/{attributeDefinition.DatatypeDefinition.ReqIFContent.DocumentRoot.TheHeader.Identifier}");
            sb.Append($"/spectype/{attributeDefinition.SpecType.Identifier}");
            sb.Append($"/attributedefinition/{attributeDefinition.Identifier}");

            result = sb.ToString();
        }
        catch (Exception e)
        {
            Log.ForContext<AttributeValuesComponent>().Error(e, "QueryAttributeDefinitionUrl Failed");
        }

        return result;
    }
}
