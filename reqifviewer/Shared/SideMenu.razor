<!------------------------------------------------------------------------------
  Copyright 2021-2025 Starion Group S.A.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
------------------------------------------------------------------------------->

@using System.Collections.Generic

@using ReqIFSharp
@using ReqIFSharp.Extensions.Services

@inject IReqIFLoaderService reqIfLoaderService

<RadzenPanelMenu>
	<RadzenPanelMenuItem Text="Home" Icon="home" Path="/"></RadzenPanelMenuItem>

	@if (this.reqifLoaded)
	{
		@foreach (var reqif in this.reqIfLoaderService.ReqIFData)
		{
			<RadzenPanelMenuItem Text=@($"ReqIF: {reqif?.TheHeader.Title}")>
				<RadzenPanelMenuItem Text="Stats" Icon="dashboard" Path="@($"/reqifstatistics/{reqif?.TheHeader.Identifier}")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="Specifications">

					@if (reqif != null)
					{
						@foreach (var specification in reqif.CoreContent.Specifications)
						{
							<RadzenPanelMenuItem Text="@specification.LongName" Icon="flare" Path=@($"/reqif/{reqif.TheHeader.Identifier}/specification/{specification.Identifier}")></RadzenPanelMenuItem>
						}
					}

				</RadzenPanelMenuItem>

				<RadzenPanelMenuItem Text="Spec Objects" Icon="nature" Path="@($"/reqif/{reqif.TheHeader.Identifier}/specobjects")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="Spec Relations" Icon="link" Path="@($"/reqif/{reqif.TheHeader.Identifier}/specrelations")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="External Objects" Icon="photo_library" Path="@($"/reqif/{reqif.TheHeader.Identifier}/externalobjects")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="Data Types" Icon="grain" Path="@($"/reqif/{reqif.TheHeader.Identifier}/datatypedefinitions")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="Spec Object Types" Icon="filter_hdr" Path="@($"/reqif/{reqif.TheHeader.Identifier}/spectypes?type=SpecObjectType")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="Specification Types" Icon="panorama_photosphere_select" Path="@($"/reqif/{reqif.TheHeader.Identifier}/spectypes?type=SpecificationType")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="Spec Relation Types" Icon="nat" Path="@($"/reqif/{reqif.TheHeader.Identifier}/spectypes?type=SpecRelationType")"></RadzenPanelMenuItem>
				<RadzenPanelMenuItem Text="Relation Group Types" Icon="mediation" Path="@($"/reqif/{reqif.TheHeader.Identifier}/spectypes?type=RelationGroupType")"></RadzenPanelMenuItem>

			</RadzenPanelMenuItem>
		}
	}
</RadzenPanelMenu>

@code {
    
    /// <summary>
    /// a value indicating whether a ReqIF file is loaded or not
    /// </summary>
    private bool reqifLoaded = false;

    /// <summary>
    /// Invoked when the component is initialized after having received its initial parameters
    /// </summary>
    protected override void OnInitialized()
    {
        if (this.reqIfLoaderService.ReqIFData == null || !this.reqIfLoaderService.ReqIFData.Any())
        {
            this.reqifLoaded = false;
        }
        else
        {
            this.reqifLoaded = true;
        }

        this.reqIfLoaderService.ReqIfChanged += ReqIfLoaderServiceOnReqIfChanged;
    }
    
    /// <summary>
    /// Handler for the <see cref="IReqIFLoaderService.ReqIfChanged"/> event
    /// </summary>
    /// <param name="sender">an instance of <see cref="IReqIFLoaderService"/></param>
    /// <param name="reqIfs">
    /// The <see cref="IEnumerable{ReqIF}"/> that has been loaded
    /// </param>
    private void ReqIfLoaderServiceOnReqIfChanged(object sender, IEnumerable<ReqIF> reqIfs)
    {
        if (reqIfs == null || !reqIfs.Any())
        {
            this.reqifLoaded = false;
        }
        else
        {
            this.reqifLoaded = true;
        }

        this.StateHasChanged();
    }
}
