<!------------------------------------------------------------------------------
    Copyright 2021-2025 Starion Group S.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
------------------------------------------------------------------------------->

@page "/reqif/{ReqIF}/spectype/{Identifier}"

@using ReqIFSharp
@using ReqIFSharp.Extensions.ReqIFExtensions
@using ReqIFSharp.Extensions.Services
@using reqifviewer.Components
@using Serilog 

@inject IReqIFLoaderService ReqIfLoaderService

@if (isLoading)
{
    <RadzenHeading Size="H1" style="display: inline-block" Text=@($"{this.currentSpecTypeName} Details") ></RadzenHeading>

    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <RadzenCard Style="margin-bottom: 20px">
        <ChildContent>
            @this.specType?.LongName
        </ChildContent>
    </RadzenCard>

    <div class="row">
	    <div class="col-md-12 col-lg-12 col-xl-12">
		    <RadzenCard Style="margin-bottom: 20px">
			    <RadzenHeading Text=@($"{this.currentSpecTypeName} - Attribute Definitions") Size="H6"></RadzenHeading>
			    <AttributeDefinitionsComponent AttributeDefinitions="this.specType?.SpecAttributes" />
		    </RadzenCard>
	    </div>
        
	    @if (this.specType is SpecObjectType specObjectType)
	    {
		    <div class="col-md-12 col-lg-12 col-xl-12">
			    <RadzenCard Visible="@(this.specType != null)">
				    <RadzenHeading Text=@($"{this.currentSpecTypeName} - Referencing SpecObjects") Size="H6"></RadzenHeading>
				    <SpecObjectsComponent SpecObjects="@specObjectType.QueryReferencingSpecObjects()" />
			    </RadzenCard>
		    </div>
	    }
    </div>
}

@code {

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="ReqIF.TheHeader"/>
    /// </summary>
    [Parameter]
    public string ReqIF { get; set; }

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="SpecObjectType"/>
    /// </summary>
    [Parameter]
    public string Identifier { get; set; }

    /// <summary>
    /// a value indicating whether the page is loading or not
    /// </summary>
    private bool isLoading = true;

    /// <summary>
    /// The title of the page
    /// </summary>
    private string currentSpecTypeName = "";

    /// <summary>
    /// The <see cref="SpecType"/> object that is loaded on the page
    /// </summary>
    private SpecType specType;

    /// <summary>
    /// The <see cref="ReqIF"/> object that is loaded on the page
    /// </summary>
    private ReqIF reqIf;

	/// <summary>
	/// Method invoked when the component has received parameters from its parent in the render tree,
	/// and the incoming values have been assigned to properties.
	/// </summary>
    protected override void OnParametersSet()
    {
        isLoading = false;

        this.LoadData();
    }

    /// <summary>
    /// Load the data into view-models
    /// </summary>
    protected void LoadData()
    {
        try
        {
            this.isLoading = true;

            this.StateHasChanged();

            this.reqIf = this.ReqIfLoaderService.ReqIFData.SingleOrDefault(x => x.TheHeader.Identifier == this.ReqIF);

            this.specType = reqIf.CoreContent.SpecTypes.SingleOrDefault(x => x.Identifier == Identifier);

            this.currentSpecTypeName = this.specType.QueryTypeDisplayName();
        }
        catch (Exception e)
        {
            Log.ForContext<SpecTypeDetailsPage>().Error(e, "LoadData Failed");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}

