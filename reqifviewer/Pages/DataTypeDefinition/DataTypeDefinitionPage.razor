<!------------------------------------------------------------------------------
    Copyright 2021-2025 Starion Group S.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
------------------------------------------------------------------------------->

@page "/reqif/{Identifier}/datatypedefinitions"

@using ReqIFSharp
@using ReqIFSharp.Extensions.ReqIFExtensions
@using ReqIFSharp.Extensions.Services
@using Serilog 

@inject IReqIFLoaderService ReqIfLoaderService

@if (isLoading)
{
    <RadzenHeading Size="H1" style="display: inline-block" Text="Data Types"></RadzenHeading>

    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px"/>
}
else
{
    <RadzenHeading Size="H1" style="display: inline-block" Text="@($"{reqIf?.TheHeader.Title} - Data Types")"></RadzenHeading>

    <RadzenDataGrid  Count="@count" PageSize="10" AllowPaging="true" AllowColumnResize="true" Data="@this.datatypeDefinitions" TItem="DatatypeDefinition">
        <Columns>
            <RadzenDataGridColumn TItem="DatatypeDefinition" Title="Long Name">
                <Template Context="datatypeDefinition">
                    <a href="/reqif/@this.Identifier/datatypedefinition/@datatypeDefinition?.Identifier">@datatypeDefinition?.LongName</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DatatypeDefinition" Title="Type">
                <Template Context="datatypeDefinition">
                    @datatypeDefinition?.QueryDatatypeName()
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DatatypeDefinition" Property="Description" Title="Description" />
            <RadzenDataGridColumn TItem="DatatypeDefinition" Property="LastChange" Title="Last Change" />
            <RadzenDataGridColumn TItem="DatatypeDefinition" Title="Identifier">
                <Template Context="datatypeDefinition">
                    <a href="/reqif/@this.Identifier/datatypedefinition/@datatypeDefinition?.Identifier">@datatypeDefinition?.Identifier</a>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="DatatypeDefinition" Title="Alternative Id">
                <Template Context="datatypeDefinition">
                    @datatypeDefinition?.AlternativeId?.Identifier
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
}

@code {

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="ReqIF.TheHeader"/>
    /// </summary>
    [Parameter]
    public string Identifier { get; set; }

    /// <summary>
    /// a value indicating whether the page is loading or not
    /// </summary>
    private bool isLoading = true;

    /// <summary>
    /// a value that states the total amount of <see cref="DatatypeDefinition"/>s in the reqif file
    /// </summary>
    private int count;

    /// <summary>
    /// The <see cref="DatatypeDefinition"/>s that are contained in the <see cref="ReqIF"/>
    /// </summary>
    private IEnumerable<DatatypeDefinition> datatypeDefinitions;

    /// <summary>
    /// The <see cref="ReqIF"/> object that is loaded on the page
    /// </summary>
    private ReqIF reqIf;

    /// <summary>
    /// Asynchronous Component initialization
    /// </summary>
    /// <returns>
    /// an awaitable <see cref="Task" />
    /// </returns>
    protected override void OnInitialized()
    {
        isLoading = false;

        this.LoadData();
    }

    /// <summary>
    ///     Load the data into view-models
    /// </summary>
    protected void LoadData()
    {
        try
        {
            isLoading = true;

            this.reqIf = this.ReqIfLoaderService.ReqIFData.SingleOrDefault(x => x.TheHeader.Identifier == this.Identifier);

            this.datatypeDefinitions = reqIf.CoreContent.DataTypes;

            this.count = this.datatypeDefinitions.Count();
        }
        catch (Exception e)
        {
            Log.ForContext<DataTypeDefinitionPage>().Error(e, "LoadData Failed");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
