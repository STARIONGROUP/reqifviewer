<!------------------------------------------------------------------------------
    Copyright 2021-2024 Starion Group S.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
------------------------------------------------------------------------------->

@page "/reqif/{ReqIF}/specobject/{SpecObject}"

@using ReqIFSharp
@using ReqIFSharp.Extensions.ReqIFExtensions
@using ReqIFSharp.Extensions.Services
@using reqifviewer.Components
@using ReqifViewer.ReqIFExtensions
@using Serilog

@inject IReqIFLoaderService ReqIfLoaderService

@if (isLoading)
{
    <RadzenHeading Size="H1" style="display: inline-block" Text="Loading SpecObject"></RadzenHeading>

    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <RadzenCard Style="margin-bottom: 20px">
        <ChildContent>
            @(new MarkupString(this.specObject?.ExtractDisplayName().ToString()))
        </ChildContent>
    </RadzenCard>

    <div class="row">

        <div class="col-md-12 col-lg-12 col-xl-12">
            <SpecObjectComponent SpecObject="@this.specObject" />
        </div>

        <div class="col-md-12 col-lg-12 col-xl-12">
            <AttributeValuesComponent AttributeValues="this.specObject?.Values" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 col-lg-6 col-xl-6">
            <RadzenCard Style="margin-bottom: 20px">
                <RadzenHeading Text="Specifications" Size="H6"></RadzenHeading>

                <SpecificationsComponent Specifications="this.specifications" />
            </RadzenCard>
        </div>
        <div class="col-md-6 col-lg-6 col-xl-6">
            <RadzenCard Style="margin-bottom: 20px">
                <RadzenHeading Text="Relationships" Size="H6"></RadzenHeading>

                <RadzenDataGrid PageSize="10" AllowPaging="true" AllowSorting="true" AllowFiltering="true" AllowColumnResize="true" Data="@this.specRelations" TItem="SpecRelation">
                    <Columns>
                        <RadzenDataGridColumn TItem="SpecRelation" Title="Source">
                            <Template Context="specRelation">
                                @if (@specRelation.Source == this.specObject)
                                {
                                    @specRelation.Source.ExtractDisplayName()
                                }
                                else
                                {
                                    <a href="reqif/@ReqIF/specobject/@specRelation.Source?.Identifier"> @(new MarkupString(specRelation.Source.ExtractDisplayName().ToString()))</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="SpecRelation" Title="Spec Relation">
                            <Template Context="specRelation">
                                <a href="reqif/@ReqIF/specrelation/@specRelation.Identifier">@(new MarkupString(specRelation.ExtractDisplayName().ToString()))</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TItem="SpecRelation" Title="Target">
                            <Template Context="specRelation">
                                @if (@specRelation.Target == this.specObject)
                                {
                                    @specRelation.Target.ExtractDisplayName()
                                }
                                else
                                {
                                    <a href="reqif/@ReqIF/specobject/@specRelation.Target?.Identifier">@(new MarkupString(specRelation.Target.ExtractDisplayName().ToString()))</a>
                                }
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenCard>
        </div>
    </div>

    <RadzenCard Style="margin-bottom: 20px" Visible="@this.externalObjectPayloads.Any()">
        <RadzenHeading Text="Embedded Objects" Size="H6"></RadzenHeading>

        <RadzenDataList WrapItems="true" AllowPaging="true" Data="@this.externalObjectPayloads" TItem="Tuple<ExternalObject, String>" PageSize="5">
            <Template Context="payload">
                <RadzenCard>
                    
                        <div class="row">
                            <div>
                                <img src="@payload.Item2" />
                                <br />
                                @(new MarkupString (payload.Item1.Owner?.ExtractUnformattedTextFromValue()))
                            </div>
                        </div>
                    
                </RadzenCard>
            </Template>
        </RadzenDataList>
    </RadzenCard>

}

@code {

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="ReqIF.TheHeader"/>
    /// </summary>
    [Parameter]
    public string ReqIF { get; set; }

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="SpecObject"/>
    /// </summary>
    [Parameter]
    public string SpecObject { get; set; }

    /// <summary>
    /// The <see cref="SpecObject"/> object that is loaded on the page
    /// </summary>
    private SpecObject specObject;

    /// <summary>
    /// The <see cref="ExternalObject"/> associated with the current <see cref="SpecObject"/>
    /// </summary>
    private IEnumerable<Tuple<ExternalObject, string>> externalObjectPayloads;

    /// <summary>
    /// The <see cref="Specification"/> that the <see cref="SpecObject"/> is contained by
    /// </summary>
    private IEnumerable<Specification> specifications;

    /// <summary>
    /// The <see cref="SpecRelation"/> that the <see cref="SpecObject"/> is either the source or target of
    /// </summary>
    private IEnumerable<SpecRelation> specRelations;

    /// <summary>
    /// a value indicating whether the page is loading or not
    /// </summary>
    private bool isLoading = true;

	/// <summary>
	/// Method invoked when the component has received parameters from its parent in the render tree,
	/// and the incoming values have been assigned to properties.
	/// </summary>
    protected override async Task OnParametersSetAsync()
    {
        isLoading = false;

        await this.LoadData();
    }

    /// <summary>
    /// Load the data into view-models
    /// </summary>
    protected async Task LoadData()
    {
        try
        {
            isLoading = true;

            var reqIf = this.ReqIfLoaderService.ReqIFData.SingleOrDefault(x => x.TheHeader.Identifier == this.ReqIF);

            this.specObject = reqIf.CoreContent.SpecObjects.SingleOrDefault(x => x.Identifier == SpecObject);

            this.externalObjectPayloads = await this.specObject.QueryBase64PayloadsAsync(this.ReqIfLoaderService);

            this.specifications = this.specObject.QueryContainerSpecifications();

            this.specRelations = this.specObject.QuerySpecRelations();
        }
        catch (Exception e)
        {
            Log.ForContext<SpecObjectDetailsPage>().Error(e, "LoadData Failed");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
}
