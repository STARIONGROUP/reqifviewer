<!------------------------------------------------------------------------------
    Copyright 2021-2025 Starion Group S.A.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
------------------------------------------------------------------------------->

@page "/reqif/{ReqIF}/specrelation/{SpecRelation}"

@using System.Globalization
@using System.Text
@using ReqIFSharp
@using ReqIFSharp.Extensions.Services
@using ReqifViewer.ReqIFExtensions
@using reqifviewer.Components
@using Serilog

@inject IReqIFLoaderService ReqIfLoaderService

@if (isLoading)
{
    <RadzenHeading Size="H1" style="display: inline-block" Text="Loading Spec Relation"></RadzenHeading>

    <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" Style="margin-bottom: 20px" />
}
else
{
    <RadzenCard Style="margin-bottom: 20px">
        <ChildContent>
            @(new MarkupString(this.specRelation?.ExtractDisplayName().ToString()))
        </ChildContent>
    </RadzenCard>

    <RadzenFieldset AllowCollapse="true" Style="margin-bottom: 10px;">

        <HeaderTemplate>
            <span class="d-inline-flex align-items-center align-middle">
                <RadzenIcon Icon="stars" Class="mr-1" /><b>Spec Relation Properties</b>
            </span>
        </HeaderTemplate>

        <ChildContent>
            <div class="row">

                <div class="col-md-6 col-xl-6 col-lg-6">
                    <div><b>Long Name:</b></div>
                    <div>@(string.IsNullOrEmpty(this.specRelation?.LongName) ? "NOT SET" : this.specRelation.LongName) </div>

                    <div><b>Description:</b></div>
                    <div>@(string.IsNullOrEmpty(this.specRelation?.Description) ? "NOT SET" : this.specRelation.Description) </div>

                    <div><b>Last Change Date:</b></div>
                    <div>@this.specRelation?.LastChange.ToString("yyyy-MM-dd, HH:mm:ss", CultureInfo.InvariantCulture)</div>
                </div>

                <div class="col-md-6 col-xl-6 col-lg-6">

                    <div><b>Type:</b></div>
                    @if (this.specRelation?.Type == null)
                    {
                        <div>NOT SET</div>
                    }
                    else
                    {
                        <a href="@this.QuerySpecRelationTypeUrl(this.specRelation.Type)">@this.specRelation.Type.LongName</a>
                    }

                    <div><b>Identifier:</b></div>
                    <div>@this.specRelation?.Identifier</div>

                    <div><b>Alternative ID:</b></div>
                    <div>@(this.specRelation?.AlternativeId != null ? this.specRelation?.AlternativeId.Identifier : "NOT SET")</div>

                </div>
            </div>
        </ChildContent>
    </RadzenFieldset>

    <AttributeValuesComponent AttributeValues="this.specRelation.Values" />

    <div class="row">
        <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6">
            <RadzenCard Style="margin-bottom: 20px">
                <RadzenHeading Size="H5" Text="Source" />
                <SpecObjectComponent SpecObject="@this.specRelation.Source" />
                <AttributeValuesComponent AttributeValues="this.specRelation.Source.Values" />
            </RadzenCard>
        </div>

        <div class="col-sm-12 col-md-6 col-lg-6 col-xl-6">

            <RadzenCard Style="margin-bottom: 20px">
                <RadzenHeading Size="H5" Text="Target" />
                <SpecObjectComponent SpecObject="@this.specRelation.Target" />
                <AttributeValuesComponent AttributeValues="this.specRelation.Target.Values" />
            </RadzenCard>
        </div>
    </div>
}

@code {

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="ReqIF.TheHeader"/>
    /// </summary>
    [Parameter]
    public string ReqIF { get; set; }

    /// <summary>
    /// Gets or sets the unique identifier of the <see cref="SpecRelation"/>
    /// </summary>
    [Parameter]
    public string SpecRelation { get; set; }

    /// <summary>
    /// The <see cref="SpecRelation"/> object that is loaded on the page
    /// </summary>
    private SpecRelation specRelation;

    /// <summary>
    /// a value indicating whether the page is loading or not
    /// </summary>
    private bool isLoading = true;

    protected override void OnParametersSet()
    {
        isLoading = false;

        this.LoadData();
    }

    /// <summary>
    /// Load the data into view-models
    /// </summary>
    protected void LoadData()
    {
        try
        {
            isLoading = true;

            var reqIf = this.ReqIfLoaderService.ReqIFData.SingleOrDefault(x => x.TheHeader.Identifier == this.ReqIF);

            this.specRelation = reqIf.CoreContent.SpecRelations.SingleOrDefault(x => x.Identifier == SpecRelation);
        }
        catch (Exception e)
        {
            Log.ForContext<SpecRelationDetailsPage>().Error(e, "QuerySpecObjectTypeUrl Failed");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Queries the url of the <see cref="SpecRelationType"/>
    /// </summary>
    /// <param name="specRelationType">
    /// The <see cref="SpecRelationType"/> of which the url is to be queried
    /// </param>
    /// <returns>
    /// a string representing the url of the <see cref="SpecRelationType"/>
    /// </returns>
    private string QuerySpecRelationTypeUrl(SpecRelationType specRelationType)
    {
        var result = "/";

        try
        {
            var sb = new StringBuilder();

            sb.Append($"/reqif/{specRelationType.ReqIFContent.DocumentRoot.TheHeader.Identifier}");
            sb.Append($"/spectype/{specRelationType.Identifier}");

            result = sb.ToString();
        }
        catch (Exception e)
        {
            Log.ForContext<SpecRelationDetailsPage>().Error(e, "QuerySpecRelationTypeUrl Failed");
        }

        return result;
    }
}
